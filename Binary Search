//Binary Search:
Binary search is a way to search by utilizing a "divide and conquer" approach.  It is O(log n). For this to work properly, the array must already be sorted.  You split the array in half, and 
determine if the search key is in the left or right half.  You can do this by comparing < or >.  If  the search key is determined to be in the left half, we repeat the process until the search key 
is found.  If the array cannot be split further, we can then conclude that the search key is not present in the array.

JAVASCRIPT example:
function binarySearch(arr, target) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        let middle = Math.floor((left + right) / 2);

        if (arr[middle] === target) {
            return middle; // Target found, return the index
        } else if (arr[middle] < target) {
            left = middle + 1; // Search the right half
        } else {
            right = middle - 1; // Search the left half
        }
    }

    return -1; // Target not found
}

// Example usage:
const sortedArray = [1, 3, 5, 7, 9, 11, 13, 15];
const target = 7;
const result = binarySearch(sortedArray, target);

if (result !== -1) {
    console.log(`Target found at index: ${result}`);
} else {
    console.log('Target not found in the array.');
}
****************************************************************************************************************************************************************************************************
PYTHON example: 
def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        middle = (left + right) // 2

        if arr[middle] == target:
            return middle  # Target found, return the index
        elif arr[middle] < target:
            left = middle + 1  # Search the right half
        else:
            right = middle - 1  # Search the left half

    return -1  # Target not found

# Example usage:
sorted_list = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7
result = binary_search(sorted_list, target)

if result != -1:
    print(f"Target found at index: {result}")
else:
    print("Target not found in the list.")
****************************************************************************************************************************************************************************************************
JAVA example: 
public class BinarySearch {

    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int middle = left + (right - left) / 2; // Avoids overflow -> NOTE: 
                                                    // Java: Uses fixed-size integers that can overflow, wrapping around to the minimum representable value. 
                                                    // Python: Uses dynamically sized integers that do not overflow; they grow to accommodate large values.

            if (arr[middle] == target) {
                return middle; // Target found, return the index
            } else if (arr[middle] < target) {
                left = middle + 1; // Search the right half
            } else {
                right = middle - 1; // Search the left half
            }
        }

        return -1; // Target not found
    }

    public static void main(String[] args) {
        int[] sortedArray = {1, 3, 5, 7, 9, 11, 13, 15};
        int target = 7;
        int result = binarySearch(sortedArray, target);

        if (result != -1) {
            System.out.println("Target found at index: " + result);
        } else {
            System.out.println("Target not found in the array.");
        }
    }
}
