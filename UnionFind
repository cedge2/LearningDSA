// Union-Find //

Union-Find is a data structure that can keep track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets.  It is also known as disjoint-set data structure. 

// JAVASCRIPT example: //

class UnionFind {
  constructor(size) {
    this.parent = new Array(size).fill(null).map((_, index) => index);
    this.rank = new Array(size).fill(0);
  }

  // Find the root of the set containing element `p`
  find(p) {
    if (this.parent[p] !== p) {
      // Path compression
      this.parent[p] = this.find(this.parent[p]);
    }
    return this.parent[p];
  }

  // Unite the sets containing elements `p` and `q`
  union(p, q) {
    const rootP = this.find(p);
    const rootQ = this.find(q);

    if (rootP !== rootQ) {
      // Union by rank
      if (this.rank[rootP] > this.rank[rootQ]) {
        this.parent[rootQ] = rootP;
      } else if (this.rank[rootP] < this.rank[rootQ]) {
        this.parent[rootP] = rootQ;
      } else {
        this.parent[rootQ] = rootP;
        this.rank[rootP] += 1;
      }
    }
  }

  // Check if elements `p` and `q` are in the same set
  connected(p, q) {
    return this.find(p) === this.find(q);
  }
}

// Example usage
const uf = new UnionFind(10);
uf.union(1, 2);
uf.union(2, 3);
uf.union(4, 5);
uf.union(6, 7);
uf.union(5, 6);

console.log(uf.connected(1, 3)); // true
console.log(uf.connected(4, 7)); // true
console.log(uf.connected(1, 7)); // false


***************************************************************************************************************************************************************************************************

// PYTHON example: //

class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, p):
        if self.parent[p] != p:
            # Path compression
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]

    def union(self, p, q):
        rootP = self.find(p)
        rootQ = self.find(q)

        if rootP != rootQ:
            # Union by rank
            if self.rank[rootP] > self.rank[rootQ]:
                self.parent[rootQ] = rootP
            elif self.rank[rootP] < self.rank[rootQ]:
                self.parent[rootP] = rootQ
            else:
                self.parent[rootQ] = rootP
                self.rank[rootP] += 1

    def connected(self, p, q):
        return self.find(p) == self.find(q)

# Example usage
uf = UnionFind(10)
uf.union(1, 2)
uf.union(2, 3)
uf.union(4, 5)
uf.union(6, 7)
uf.union(5, 6)

print(uf.connected(1, 3)) # True
print(uf.connected(4, 7)) # True
print(uf.connected(1, 7)) # False


**************************************************************************************************************************************************************************************************

// JAVA example: //

public class UnionFind {
    private int[] parent;
    private int[] rank;

    public UnionFind(int size) {
        parent = new int[size];
        rank = new int[size];
        for (int i = 0; i < size; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    public int find(int p) {
        if (parent[p] != p) {
            // Path compression
            parent[p] = find(parent[p]);
        }
        return parent[p];
    }

    public void union(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);

        if (rootP != rootQ) {
            // Union by rank
            if (rank[rootP] > rank[rootQ]) {
                parent[rootQ] = rootP;
            } else if (rank[rootP] < rank[rootQ]) {
                parent[rootP] = rootQ;
            } else {
                parent[rootQ] = rootP;
                rank[rootP]++;
            }
        }
    }

    public boolean connected(int p, int q) {
        return find(p) == find(q);
    }

    public static void main(String[] args) {
        UnionFind uf = new UnionFind(10);
        uf.union(1, 2);
        uf.union(2, 3);
        uf.union(4, 5);
        uf.union(6, 7);
        uf.union(5, 6);

        System.out.println(uf.connected(1, 3)); // true
        System.out.println(uf.connected(4, 7)); // true
        System.out.println(uf.connected(1, 7)); // false
    }
}
