//Queue - A quque is similar to a stack, only it goes in order of FIFO, first in first out.  It is reminescent of people in line at a theme park - people will line up from the back, but the person
in front will leave the line to go on a ride when it is their turn.  The main difference in implementation is using shift() instead of pop(), (in Javascript)
which will return the first item instead of the last item.

JAVASCRIPT example: 
class Queue {
  constructor() {
    this.items = [];
  }

  // Add an item to the back of the queue
  enqueue(item) {
    this.items.push(item);
  }

  // Remove and return the item from the front of the queue
  dequeue() {
    if (this.isEmpty()) {
      throw new Error("Queue is empty");
    }
    return this.items.shift();
  }

  // Check if the queue is empty
  isEmpty() {
    return this.items.length === 0;
  }

  // Get the size of the queue
  size() {
    return this.items.length;
  }

  // Peek at the front item without removing it
  peek() {
    if (this.isEmpty()) {
      throw new Error("Queue is empty");
    }
    return this.items[0];
  }
}

// Example usage:
const queue = new Queue();
queue.enqueue(1);
queue.enqueue(2);
queue.enqueue(3);

console.log(queue.dequeue()); // Output: 1
console.log(queue.peek());    // Output: 2
console.log(queue.size());    // Output: 2
console.log(queue.isEmpty()); // Output: false
queue.dequeue();
queue.dequeue();
console.log(queue.isEmpty()); // Output: true

PYTHON example: 
class Queue:
    def __init__(self):
        self.items = []

    # Add an item to the back of the queue
    def enqueue(self, item):
        self.items.append(item)

    # Remove and return the item from the front of the queue
    def dequeue(self):
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.items.pop(0)

    # Check if the queue is empty
    def is_empty(self):
        return len(self.items) == 0

    # Get the size of the queue
    def size(self):
        return len(self.items)

    # Peek at the front item without removing it
    def peek(self):
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.items[0]

# Example usage:
queue = Queue()
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)

print(queue.dequeue()) # Output: 1
print(queue.peek())    # Output: 2
print(queue.size())    # Output: 2
print(queue.is_empty())# Output: False
queue.dequeue()
queue.dequeue()
print(queue.is_empty())# Output: True

JAVA example:
import java.util.LinkedList;
import java.util.NoSuchElementException;

public class Queue<T> {
    private LinkedList<T> items;

    public Queue() {
        this.items = new LinkedList<>();
    }

    // Add an item to the back of the queue
    public void enqueue(T item) {
        items.addLast(item);
    }

    // Remove and return the item from the front of the queue
    public T dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return items.removeFirst();
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return items.isEmpty();
    }

    // Get the size of the queue
    public int size() {
        return items.size();
    }

    // Peek at the front item without removing it
    public T peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return items.getFirst();
    }

    // Example usage
    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        System.out.println(queue.dequeue()); // Output: 1
        System.out.println(queue.peek());    // Output: 2
        System.out.println(queue.size());    // Output: 2
        System.out.println(queue.isEmpty()); // Output: false
        queue.dequeue();
        queue.dequeue();
        System.out.println(queue.isEmpty()); // Output: true
    }
}
