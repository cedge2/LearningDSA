## Rabin-Karp string search algorithm ##

#Uses hashing to search text for a pattern.  A practical application of the algorithm is to detect plagiarism.  Given source material, the algorithm can rapidly search through a paper for 
#instances of sentances from the source material, ignoring details such as case and punctuation.  Because of the abundance of the sought strings, single-string searching algorithms are impractical. 

## JAVASCRIPT example: ##

function rabinKarp(text, pattern) {
    const d = 256; // number of characters in the input alphabet
    const q = 101; // a prime number
    const n = text.length;
    const m = pattern.length;
    let p = 0; // hash value for pattern
    let t = 0; // hash value for text
    let h = 1;

    // The value of h would be "pow(d, m-1)%q"
    for (let i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }

    // Calculate the hash value of pattern and first window of text
    for (let i = 0; i < m; i++) {
        p = (d * p + pattern.charCodeAt(i)) % q;
        t = (d * t + text.charCodeAt(i)) % q;
    }

    // Slide the pattern over text one by one
    for (let i = 0; i <= n - m; i++) {
        // Check the hash values of current window of text and pattern
        if (p === t) {
            // If the hash values match, then only check characters one by one
            let match = true;
            for (let j = 0; j < m; j++) {
                if (text.charAt(i + j) !== pattern.charAt(j)) {
                    match = false;
                    break;
                }
            }

            if (match) {
                console.log("Pattern found at index " + i);
            }
        }

        // Calculate hash value for next window of text: Remove leading digit, add trailing digit
        if (i < n - m) {
            t = (d * (t - text.charCodeAt(i) * h) + text.charCodeAt(i + 1)) % q;

            // We might get negative value of t, converting it to positive
            if (t < 0) {
                t = (t + q);
            }
        }
    }
}

## Example usage
const text = "ABCCDDAEFG";
const pattern = "CDD";
rabinKarp(text, pattern);


***************************************************************************************************************************************************************************************************

## PYTHON example: ##

def rabin_karp(text, pattern):
    d = 256  # number of characters in the input alphabet
    q = 101  # a prime number
    n = len(text)
    m = len(pattern)
    p = 0  # hash value for pattern
    t = 0  # hash value for text
    h = 1

    # The value of h would be "pow(d, m-1)%q"
    for i in range(m - 1):
        h = (h * d) % q

    # Calculate the hash value of pattern and first window of text
    for i in range(m):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q

    # Slide the pattern over text one by one
    for i in range(n - m + 1):
        # Check the hash values of current window of text and pattern
        if p == t:
            # If the hash values match, then only check characters one by one
            match = True
            for j in range(m):
                if text[i + j] != pattern[j]:
                    match = False
                    break

            if match:
                print(f"Pattern found at index {i}")

        # Calculate hash value for next window of text: Remove leading digit, add trailing digit
        if i < n - m:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + m])) % q

            # We might get negative value of t, converting it to positive
            if t < 0:
                t = t + q

# Example usage
text = "ABCCDDAEFG"
pattern = "CDD"
rabin_karp(text, pattern)


**************************************************************************************************************************************************************************************************

## JAVA example: ##

public class RabinKarp {

    public static void rabinKarp(String text, String pattern) {
        int d = 256; // number of characters in the input alphabet
        int q = 101; // a prime number
        int n = text.length();
        int m = pattern.length();
        int p = 0; // hash value for pattern
        int t = 0; // hash value for text
        int h = 1;

        // The value of h would be "pow(d, m-1)%q"
        for (int i = 0; i < m - 1; i++) {
            h = (h * d) % q;
        }

        // Calculate the hash value of pattern and first window of text
        for (int i = 0; i < m; i++) {
            p = (d * p + pattern.charAt(i)) % q;
            t = (d * t + text.charAt(i)) % q;
        }

        // Slide the pattern over text one by one
        for (int i = 0; i <= n - m; i++) {
            // Check the hash values of current window of text and pattern
            if (p == t) {
                // If the hash values match, then only check characters one by one
                boolean match = true;
                for (int j = 0; j < m; j++) {
                    if (text.charAt(i + j) != pattern.charAt(j)) {
                        match = false;
                        break;
                    }
                }

                if (match) {
                    System.out.println("Pattern found at index " + i);
                }
            }

            // Calculate hash value for next window of text: Remove leading digit, add trailing digit
            if (i < n - m) {
                t = (d * (t - text.charAt(i) * h) + text.charAt(i + m)) % q;

                // We might get negative value of t, converting it to positive
                if (t < 0) {
                    t = t + q;
                }
            }
        }
    }

    public static void main(String[] args) {
        String text = "ABCCDDAEFG";
        String pattern = "CDD";
        rabinKarp(text, pattern);
    }
}
