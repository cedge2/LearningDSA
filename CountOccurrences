// Count Occurrences //

The goal is to count how often a certain value appears in an array.  The obvious way to do this is with a linear search from the beginning of the array to the end, and keep count of how often you
come across the value.  This would be O(n).  However, if the array is sorted you can do it much faster, in O(log n) time, by using a modification of binary search.  

// JAVASCRIPT example: //

function countOccurrences(arr, target) {
    // Helper function to find the first occurrence of target
    function findFirstOccurrence(arr, target) {
        let low = 0;
        let high = arr.length - 1;
        let firstOccurrence = -1;

        while (low <= high) {
            let mid = Math.floor((low + high) / 2);

            if (arr[mid] === target) {
                firstOccurrence = mid;
                high = mid - 1; // move to the left subarray
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return firstOccurrence;
    }

    // Helper function to find the last occurrence of target
    function findLastOccurrence(arr, target) {
        let low = 0;
        let high = arr.length - 1;
        let lastOccurrence = -1;

        while (low <= high) {
            let mid = Math.floor((low + high) / 2);

            if (arr[mid] === target) {
                lastOccurrence = mid;
                low = mid + 1; // move to the right subarray
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return lastOccurrence;
    }

    const first = findFirstOccurrence(arr, target);
    if (first === -1) {
        return 0; // target is not present in the array
    }

    const last = findLastOccurrence(arr, target);
    return last - first + 1;
}

// Example usage:
const arr = [1, 2, 2, 2, 3, 4, 4, 5];
const target = 2;
console.log(countOccurrences(arr, target)); // Output: 3


***************************************************************************************************************************************************************************************************

// PYTHON example: //

def count_occurrences(arr, target):
    # Helper function to find the first occurrence of target
    def find_first_occurrence(arr, target):
        low, high = 0, len(arr) - 1
        first_occurrence = -1

        while low <= high:
            mid = (low + high) // 2
            if arr[mid] == target:
                first_occurrence = mid
                high = mid - 1  # move to the left subarray
            elif arr[mid] < target:
                low = mid + 1
            else:
                high = mid - 1

        return first_occurrence

    # Helper function to find the last occurrence of target
    def find_last_occurrence(arr, target):
        low, high = 0, len(arr) - 1
        last_occurrence = -1

        while low <= high:
            mid = (low + high) // 2
            if arr[mid] == target:
                last_occurrence = mid
                low = mid + 1  # move to the right subarray
            elif arr[mid] < target:
                low = mid + 1
            else:
                high = mid - 1

        return last_occurrence

    first = find_first_occurrence(arr, target)
    if first == -1:
        return 0  # target is not present in the array

    last = find_last_occurrence(arr, target)
    return last - first + 1

# Example usage:
arr = [1, 2, 2, 2, 3, 4, 4, 5]
target = 2
print(count_occurrences(arr, target))  # Output: 3


**************************************************************************************************************************************************************************************************

// JAVA example: //

public class CountOccurrences {

    public static int countOccurrences(int[] arr, int target) {
        int first = findFirstOccurrence(arr, target);
        if (first == -1) {
            return 0; // target is not present in the array
        }

        int last = findLastOccurrence(arr, target);
        return last - first + 1;
    }

    private static int findFirstOccurrence(int[] arr, int target) {
        int low = 0, high = arr.length - 1;
        int firstOccurrence = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                firstOccurrence = mid;
                high = mid - 1; // move to the left subarray
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return firstOccurrence;
    }

    private static int findLastOccurrence(int[] arr, int target) {
        int low = 0, high = arr.length - 1;
        int lastOccurrence = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                lastOccurrence = mid;
                low = mid + 1; // move to the right subarray
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return lastOccurrence;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 2, 2, 3, 4, 4, 5};
        int target = 2;
        System.out.println(countOccurrences(arr, target)); // Output: 3
    }
}
