// Haversine Distance //

The Haversine distance algorithm calculates the shortest distance between two points on a sphere using their latitude and longitude coordinates. It assumes the Earth is a perfect sphere,
providing an approximation suitable for many practical purposes. The formula considers the spherical geometry to compute the great-circle distance between the points, accounting for the curvature 
of the Earth. This distance is useful in applications like navigation, where accurate distance calculations between geographic locations are needed.


// JAVASCRIPT example: //

function haversineDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius of the Earth in km
    const dLat = (lat2 - lat1) * Math.PI / 180; // Convert degrees to radians
    const dLon = (lon2 - lon1) * Math.PI / 180; // Convert degrees to radians
    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distance in km
    return distance;
}

// Example usage:
const distance = haversineDistance(52.5200, 13.4050, 51.5074, -0.1278); // Berlin to London
console.log('Distance:', distance.toFixed(2), 'km');


***************************************************************************************************************************************************************************************************


// PYTHON example: //

import math

def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371.0  # Radius of the Earth in km

    # Convert latitude and longitude from degrees to radians
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    # Haversine formula
    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad
    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance = R * c

    return distance

# Example usage:
distance = haversine_distance(52.5200, 13.4050, 51.5074, -0.1278)  # Berlin to London
print(f"Distance: {distance:.2f} km")


***************************************************************************************************************************************************************************************************


// JAVA example: //

public class HaversineDistance {

    public static void main(String[] args) {
        double distance = haversineDistance(52.5200, 13.4050, 51.5074, -0.1278); // Berlin to London
        System.out.printf("Distance: %.2f km\n", distance);
    }

    public static double haversineDistance(double lat1, double lon1, double lat2, double lon2) {
        final double R = 6371.0; // Radius of the Earth in km

        // Convert latitude and longitude from degrees to radians
        double lat1_rad = Math.toRadians(lat1);
        double lon1_rad = Math.toRadians(lon1);
        double lat2_rad = Math.toRadians(lat2);
        double lon2_rad = Math.toRadians(lon2);

        // Haversine formula
        double dlon = lon2_rad - lon1_rad;
        double dlat = lat2_rad - lat1_rad;
        double a = Math.sin(dlat / 2) * Math.sin(dlat / 2) +
                   Math.cos(lat1_rad) * Math.cos(lat2_rad) *
                   Math.sin(dlon / 2) * Math.sin(dlon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double distance = R * c;

        return distance;
    }
}
