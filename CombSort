// Comb Sort //

Comb Sort is an efficient algorithm that improves upon the Bubble Sort. The algorithm aims to eliminate turtles, or small values near the end of the list, that slow down Bubble Sort.

// JAVASCRIPT example: //

function combSort(arr) {
    const shrinkFactor = 1.3;
    let gap = arr.length;
    let sorted = false;

    while (!sorted) {
        gap = Math.floor(gap / shrinkFactor);
        if (gap <= 1) {
            gap = 1;
            sorted = true;
        }

        for (let i = 0; i + gap < arr.length; i++) {
            if (arr[i] > arr[i + gap]) {
                [arr[i], arr[i + gap]] = [arr[i + gap], arr[i]];
                sorted = false;
            }
        }
    }

    return arr;
}

// Example usage
let array = [64, 25, 12, 22, 11];
console.log("Original array:", array);

let sortedArray = combSort(array);
console.log("Sorted array:", sortedArray);


***************************************************************************************************************************************************************************************************

// PYTHON example: //

def comb_sort(arr):
    shrink_factor = 1.3
    gap = len(arr)
    sorted = False

    while not sorted:
        gap = int(gap / shrink_factor)
        if gap <= 1:
            gap = 1
            sorted = True

        for i in range(len(arr) - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                sorted = False

    return arr

# Example usage
array = [64, 25, 12, 22, 11]
print("Original array:", array)

sorted_array = comb_sort(array)
print("Sorted array:", sorted_array)


***************************************************************************************************************************************************************************************************

// JAVA example: //

public class CombSort {
    // Function to sort array using Comb Sort
    public static void combSort(int[] arr) {
        int n = arr.length;
        double shrinkFactor = 1.3;
        int gap = n;
        boolean sorted = false;

        while (!sorted) {
            gap = (int) (gap / shrinkFactor);
            if (gap <= 1) {
                gap = 1;
                sorted = true;
            }

            for (int i = 0; i + gap < n; i++) {
                if (arr[i] > arr[i + gap]) {
                    int temp = arr[i];
                    arr[i] = arr[i + gap];
                    arr[i + gap] = temp;
                    sorted = false;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] array = {64, 25, 12, 22, 11};
        System.out.println("Original array:");
        for (int i : array) {
            System.out.print(i + " ");
        }
        System.out.println();

        combSort(array);

        System.out.println("Sorted array:");
        for (int i : array) {
            System.out.print(i + " ");
        }
    }
}
