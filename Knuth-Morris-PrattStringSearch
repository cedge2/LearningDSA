// Knuth-Morris-Pratt String Search //

The Knuth-Morris-Pratt algorithm is considered one of hte best algotithms for solving the pattern matching problem (a linear-time string matching problem which returns the indexes of all occurences
in a given pattern).  Although Boyer-Moore is usually preferred, this algotithm is simpler and has the same running time (linear). It is not much different from the naive string search procedure,
but instead of making a shift of one charagter when a mismatch occurs, it uses a more intelligent way to move the pattern along the text.  It features a pattern pre-processing stage where it 
acquires all the info that will make the algorithm skip redundant comparisons, resulting in larger shifts.  

// JAVASCRIPT example: //

function kmpSearch(pattern, text) {
    // Preprocess the pattern to get the longest prefix suffix (LPS) array
    function computeLPSArray(pattern) {
        const lps = new Array(pattern.length).fill(0);
        let length = 0;  // length of the previous longest prefix suffix
        let i = 1;

        while (i < pattern.length) {
            if (pattern[i] === pattern[length]) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length !== 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    const lps = computeLPSArray(pattern);
    const result = [];

    let i = 0; // index for text
    let j = 0; // index for pattern

    while (i < text.length) {
        if (pattern[j] === text[i]) {
            i++;
            j++;
        }

        if (j === pattern.length) {
            result.push(i - j);
            j = lps[j - 1];
        } else if (i < text.length && pattern[j] !== text[i]) {
            if (j !== 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return result;
}

// Example usage:
const text = "ABABDABACDABABCABAB";
const pattern = "ABABCABAB";
const result = kmpSearch(pattern, text);
console.log("Pattern found at indices:", result);


***************************************************************************************************************************************************************************************************

// PYTHON example: //

def kmp_search(pattern, text):
    # Preprocess the pattern to get the longest prefix suffix (LPS) array
    def compute_lps_array(pattern):
        lps = [0] * len(pattern)
        length = 0  # length of the previous longest prefix suffix
        i = 1

        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    lps = compute_lps_array(pattern)
    result = []

    i = 0  # index for text
    j = 0  # index for pattern

    while i < len(text):
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == len(pattern):
            result.append(i - j)
            j = lps[j - 1]
        elif i < len(text) and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return result

# Example usage:
text = "ABABDABACDABABCABAB"
pattern = "ABABCABAB"
result = kmp_search(pattern, text)
print("Pattern found at indices:", result)


**************************************************************************************************************************************************************************************************

// JAVA example: //

public class KMP {
    // Function to search for pattern in text using KMP algorithm
    public static void kmpSearch(String pattern, String text) {
        int[] lps = computeLPSArray(pattern);
        int i = 0; // index for text
        int j = 0; // index for pattern

        while (i < text.length()) {
            if (pattern.charAt(j) == text.charAt(i)) {
                i++;
                j++;
            }
            if (j == pattern.length()) {
                System.out.println("Pattern found at index " + (i - j));
                j = lps[j - 1];
            } else if (i < text.length() && pattern.charAt(j) != text.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
    }

    // Function to compute the LPS array
    public static int[] computeLPSArray(String pattern) {
        int[] lps = new int[pattern.length()];
        int length = 0;
        int i = 1;
        lps[0] = 0;

        while (i < pattern.length()) {
            if (pattern.charAt(i) == pattern.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    // Main method to test the KMP algorithm
    public static void main(String[] args) {
        String text = "ABABDABACDABABCABAB";
        String pattern = "ABABCABAB";
        kmpSearch(pattern, text);
    }
}
